// IPTV Blog Database Schema
// Optimized for SEO-friendly blog content management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Admin Users for dashboard access
model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  articles Article[]

  @@map("admin_users")
}

// Article Categories (IPTV Players, Android Boxes, etc.)
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  color       String?  // Hex color for UI
  icon        String?  // Icon name for UI
  
  // Customization fields
  showInMenu  Boolean  @default(true)  // Show in navigation menu
  menuOrder   Int      @default(0)     // Order in menu (0 = first)
  isActive    Boolean  @default(true)  // Active/inactive category
  menuLabel   String?                  // Custom label for menu (if different from name)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  articles Article[]

  @@map("categories")
}

// Article Tags for better organization
model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  color       String?  // Hex color for UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  articles ArticleTag[]

  @@map("tags")
}

// Main Articles table
model Article {
  id             String        @id @default(cuid())
  title          String
  slug           String        @unique
  excerpt        String?       @db.Text
  content        String        @db.LongText
  featuredImage  String?
  status         ArticleStatus @default(DRAFT)
  publishedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // SEO fields
  seoTitle       String?
  seoDescription String?       @db.Text
  seoKeywords    String?       @db.Text
  
  // Analytics
  viewCount      Int           @default(0)
  readTime       Int?          // in minutes
  
  // Relations
  authorId       String
  author         AdminUser     @relation(fields: [authorId], references: [id])
  categoryId     String
  category       Category      @relation(fields: [categoryId], references: [id])
  tags           ArticleTag[]
  media          ArticleMedia[]
  comments       Comment[]

  @@map("articles")
}

// Many-to-many relationship between Articles and Tags
model ArticleTag {
  id        String  @id @default(cuid())
  articleId String
  tagId     String
  
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([articleId, tagId])
  @@map("article_tags")
}

// Media files (images, videos, etc.)
model Media {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  alt          String?
  caption      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  articles     ArticleMedia[]

  @@map("media")
}

// Many-to-many relationship between Articles and Media
model ArticleMedia {
  id        String  @id @default(cuid())
  articleId String
  mediaId   String
  
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  media     Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([articleId, mediaId])
  @@map("article_media")
}

// Comments on articles
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  authorName String?
  authorEmail String?
  authorUrl String?
  isApproved Boolean @default(false)
  isGuest   Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

// Static pages (Contact, Privacy Policy, etc.)
model Page {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String   @db.LongText
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pages")
}

// Site Settings for global configuration
model SiteSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String @db.Text
  type  String @default("string") // string, number, boolean, json

  @@map("site_settings")
}

// Enums
enum Role {
  ADMIN
  EDITOR
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
